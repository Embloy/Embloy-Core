{
  "openapi": "3.0.3",
  "info": {
    "title": "Embloy API 0.1",
    "description": "The Embloy API is meant to extract Embloy's value off from the web browser onto external devices.",
    "termsOfService": "https://embloy.com/de/impressum/",
    "contact": {
      "email": "info@embloy.com"
    },
    "license": {
      "name": "GNU Affero General Public License v3.0",
      "url": "https://www.gnu.org/licenses/agpl-3.0.de.html"
    },
    "version": "0.1.1"
  },
  "externalDocs": {
    "description": "Find out more about Embloy",
    "url": "https://github.com/carlobortolan/Embloy"
  },
  "servers": [
    {
      "url": "https://embloy.onrender.com/api/v0/"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Methods for managing user accounts on embloy"
    }
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register an user and create an Embloy account",
        "description": "This creates an user at its related records. In its entirety, this is referred to as an Embloy account. An freshly created Embloy account is inactive and first needs to be verified by the user.",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "The email address to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "winston.smith@embloy.com"
            }
          },
          {
            "name": "first_name",
            "in": "body",
            "description": "The user's given names (first + middle name[s] [if any]) as stated on their identity card",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Winston"
            }
          },
          {
            "name": "last_name",
            "in": "body",
            "description": "The user's surname as stated in their identity card",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Smith"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "The password to be used for login.",
            "required": true,
            "schema": {
              "maxLength": 72,
              "type": "string",
              "example": "doublethink"
            }
          },
          {
            "name": "password_confirmation",
            "in": "body",
            "description": "The password to be used for login (must be exactly the same as above)",
            "required": true,
            "schema": {
              "type": "string",
              "example": "doublethink"
            }
          }
        ],
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "int64",
                      "example": "Account registered! Please activate this account to proceed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `user`\n- `email`\n- `first_name`\n- `last_name`\n- `password`\n- `password_confirmation`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_BLANK`: When a required attribute is blank. All required parameters are denoted above. If all required attributes were indeed given but this error gets raised it could be that the attributs are provided falsely (e.g. via header or via path instead of body ...)\n- `ERR_INVALID`: When a given attribute is malformed or unknown. Check for spelling or other formatting errors. This specific error indicates that no database records could be retrieved for the given inputs. So double check whether the email is correct or an corresponding Embloy account truly exists."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is malformed or unknown",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `email`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_TAKEN",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_TAKEN`: When a required attribute must be unique and already exists in the database. This specific error indicates that another Embloy account with the exact same email already exists."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute exists",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/verify": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Verify Embloy account credentials",
        "description": "This makes sure that the Embloy account was registerd successfully and automatically claims the initial refresh token. Verifying an account is mandatory before using any function of Embloy's plattform.",
        "operationId": "verifyUser",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "The email address to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "winston.smith@embloy.com"
            }
          },
          {
            "name": "password",
            "in": "path",
            "description": "The password to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "doublethink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refresh_token": {
                      "type": "string",
                      "format": "int64",
                      "example": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOjExMDIsImV4cCI6MTY3ODQ4Mjk5MSwianRpIjoiOWRiMDkzODZlYTZjZTQ1MTQxMWY1MjdhYTIzYjhkODEiLCJpYXQiOjE2Nzg0Njg1OTEsImlzcyI6Imh1bW1lbEotU0ZDOCJ9.-fMsb8YlK7eNXGM9VrElHWFMWH4fVIv4CFebkwS9Ge0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `email`\n- `password`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_BLANK",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_BLANK`: When a required attribute is blank. All required parameters are denoted above. If all required attributes were indeed given but this error gets raised it could be that the attributs are provided falsely (e.g. via header or via path instead of body ...)"
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute can't be blank",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email||password": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `email||password`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_INVALID`: When a given attribute is malformed or unknown. Check for spelling or other formatting errors. This specific error indicates that the provided password is incorrect."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is malformed or unknown",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `user`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_UNNECESSARY",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_UNNECESSARY`: When a requested task is unnecessary, the system refusess to process it. Often it helps to ask the system what your exact intentions are and wheter the specific call to the Embloy API is the standard method for it. This specific error implies that the Embloy account is aleady verified."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is already verified",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/auth/token/refresh": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Claim a refresh token",
        "description": "This first verifies Embloy account credentials and then issues a refresh token for this specific account. Refresh tokens only possess a time-limited validity.",
        "operationId": "createRefreshToken",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "The email address to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "winston.smith@embloy.com"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "The password to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "doublethink"
            }
          }
        ],
        "requestBody": {
          "description": "Create refresh token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refresh_token": {
                      "type": "string",
                      "format": "int64",
                      "example": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOjExMDIsImV4cCI6MTY3ODQ4NTQ4OSwianRpIjoiMmI0MmQwNTViYTY1ZTgxNDhiYTQxOGY4M2E4NmE5NTYiLCJpYXQiOjE2Nzg0NzEwODksImlzcyI6Imh1bW1lbEotU0ZDOCJ9.uQa37OkZj_v7G5vTfRwXGlXg_12ywsyZru5RuCAC-xg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email||password": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `refresh_token`\n- `email`\n- `password`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_BLANK`: When a required attribute is blank. All required parameters are denoted above. If all required attributes were indeed given but this error gets raised it could be that the attributs are provided falsely (e.g. via header or via path instead of body ...)\n- `ERR_INVALID`: When a given attribute is malformed or unknown. Check for spelling or other formatting errors. This specific error indicates that no database records could be retrieved for the given inputs. So double check whether the email is correct or an corresponding Embloy account truly exists."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is malformed or unknown",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email||password": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `email||password`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_INVALID`: When a given attribute is malformed or unknown. Check for spelling or other formatting errors. This specific error indicates that the provided password is incorrect."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is malformed or unknown",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `user`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_RAC",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_RAC`: This error code is returned when the requested resource cannot be accessed due to access restrictions. The server understood the request but refuses to authorize it, in this case becausehe request violates security policies. This can be caused by either A: The Embloy account is not verified, or B: the Embloy account is currentl blackisted and therefore temporarily banned."
                          },
                          "description": {
                            "type": "string",
                            "example": "Proceeding is inhibited by an access restriction",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "int64",
                      "example": "Please try again later. If this error persists, we recommend to contact our support team",
                      "description": "A message indicating that an internal server error has occurred. This specific error only occurs in case of an severe bug in the codebase."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "int64",
                "example": "winston.smith@embloy.com"
              },
              "first_name": {
                "type": "string",
                "example": "Winston"
              },
              "last_name": {
                "type": "string",
                "example": "Smith"
              },
              "password": {
                "type": "string",
                "example": "doublethink"
              },
              "password_confirmation": {
                "type": "string",
                "example": "doublethink"
              }
            }
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "int64",
                "example": "winston.smith@embloy.com"
              },
              "password": {
                "type": "string",
                "example": "doublethink"
              }
            }
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
{
  "openapi": "3.0.3",
  "info": {
    "title": "Embloy API 0.1",
    "description": "The Embloy API is meant to extract Embloy's value off from the web browser onto external devices.",
    "termsOfService": "https://embloy.com/de/impressum/",
    "contact": {
      "email": "info@embloy.com"
    },
    "license": {
      "name": "GNU Affero General Public License v3.0",
      "url": "https://www.gnu.org/licenses/agpl-3.0.de.html"
    },
    "version": "0.1.1"
  },
  "externalDocs": {
    "description": "Find out more about Embloy",
    "url": "https://github.com/carlobortolan/Embloy"
  },
  "servers": [
    {
      "url": "https://embloy.onrender.com/api/v0/"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Methods for managing user accounts on embloy"
    }
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register an user and create an Embloy account",
        "description": "This creates an user at its related records. In its entirety, this is referred to as an Embloy account. An freshly created Embloy account is inactive and first needs to be verified by the user.",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "The email address to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "winston.smith@embloy.com"
            }
          },
          {
            "name": "first_name",
            "in": "body",
            "description": "The user's given names (first + middle name[s] [if any]) as stated on their identity card",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Winston"
            }
          },
          {
            "name": "last_name",
            "in": "body",
            "description": "The user's surname as stated in their identity card",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Smith"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "The password to be used for login.",
            "required": true,
            "schema": {
              "maxLength": 72,
              "type": "string",
              "example": "doublethink"
            }
          },
          {
            "name": "password_confirmation",
            "in": "body",
            "description": "The password to be used for login (must be exactly the same as above)",
            "required": true,
            "schema": {
              "type": "string",
              "example": "doublethink"
            }
          }
        ],
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "int64",
                      "example": "Account registered! Please activate this account to proceed"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `user`\n- `email`\n- `first_name`\n- `last_name`\n- `password`\n- `password_confirmation`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_BLANK`: When a required attribute is blank. All required parameters are denoted above. If all required attributes were indeed given but this error gets raised it could be that the attributs are provided falsely (e.g. via header or via path instead of body ...)\n- `ERR_INVALID`: When a given attribute is malformed or unknown. Check for spelling or other formatting errors. This specific error indicates that no database records could be retrieved for the given inputs. So double check whether the email is correct or an corresponding Embloy account truly exists."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is malformed or unknown",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `email`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_TAKEN",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_TAKEN`: When a required attribute must be unique and already exists in the database. This specific error indicates that another Embloy account with the exact same email already exists."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute exists",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/verify": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Verify Embloy account credentials",
        "description": "This makes sure that the Embloy account was registerd successfully and automatically claims the initial refresh token. Verifying an account is mandatory before using any function of Embloy's plattform.",
        "operationId": "verifyUser",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "The email address to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "winston.smith@embloy.com"
            }
          },
          {
            "name": "password",
            "in": "path",
            "description": "The password to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "doublethink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refresh_token": {
                      "type": "string",
                      "format": "int64",
                      "example": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOjExMDIsImV4cCI6MTY3ODQ4Mjk5MSwianRpIjoiOWRiMDkzODZlYTZjZTQ1MTQxMWY1MjdhYTIzYjhkODEiLCJpYXQiOjE2Nzg0Njg1OTEsImlzcyI6Imh1bW1lbEotU0ZDOCJ9.-fMsb8YlK7eNXGM9VrElHWFMWH4fVIv4CFebkwS9Ge0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `email`\n- `password`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_BLANK",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_BLANK`: When a required attribute is blank. All required parameters are denoted above. If all required attributes were indeed given but this error gets raised it could be that the attributs are provided falsely (e.g. via header or via path instead of body ...)"
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute can't be blank",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email||password": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `email||password`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_INVALID`: When a given attribute is malformed or unknown. Check for spelling or other formatting errors. This specific error indicates that the provided password is incorrect."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is malformed or unknown",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `user`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_UNNECESSARY",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_UNNECESSARY`: When a requested task is unnecessary, the system refusess to process it. Often it helps to ask the system what your exact intentions are and wheter the specific call to the Embloy API is the standard method for it. This specific error implies that the Embloy account is aleady verified."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is already verified",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/auth/token/refresh": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Claim a refresh token",
        "description": "This first authenticates the account credentials and then issues a refresh token for this specific verified Embloy account. Refresh tokens only possess a time-limited validity. (current default validity is 2 weeks) Refresh tokens are primarily used to claim the much more powerful (but much shorter valid) access tokens.",
        "operationId": "createRefreshToken",
        "parameters": [
          {
            "name": "email",
            "in": "body",
            "description": "The email address to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "winston.smith@embloy.com"
            }
          },
          {
            "name": "password",
            "in": "body",
            "description": "The password to be used for login",
            "required": true,
            "schema": {
              "type": "string",
              "example": "doublethink"
            }
          },
          {
            "name": "validity",
            "in": "body",
            "description": "The validity interval for the refresh token (NOT IMPLEMENTED IN API v0)",
            "required": false,
            "schema": {
              "type": "string",
              "format": "int64",
              "example": 20000
            }
          }
        ],
        "requestBody": {
          "description": "Create refresh token",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "refresh_token": {
                      "type": "string",
                      "format": "int64",
                      "example": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOjExMDIsImV4cCI6MTY3ODQ4NTQ4OSwianRpIjoiMmI0MmQwNTViYTY1ZTgxNDhiYTQxOGY4M2E4NmE5NTYiLCJpYXQiOjE2Nzg0NzEwODksImlzcyI6Imh1bW1lbEotU0ZDOCJ9.uQa37OkZj_v7G5vTfRwXGlXg_12ywsyZru5RuCAC-xg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email||password": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `validity`\n- `email|password`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_BLANK",
                            "description": "The type of error that occurred. Possible values are:\n- `ERR_BLANK`: When a required attribute is blank. All required parameters are denoted above. If all required attributes were indeed given but this error gets raised it could be that the attributs are provided falsely (e.g. via header or via path instead of body ...)\n- `ERR_INVALID`: When a given attribute is malformed or unknown. Check for spelling or other formatting errors. This specific error indicates that the individually set validity interval for the refresh token is falsely formatted. So double check whether the provided attribute obeys the rekevant denotations."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute can't be blank",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email||password": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `email||password`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n- `ERR_INVALID`: When a given attribute is malformed or unknown. Check for spelling or other formatting errors. This specific error either indicates that no database records could be retrieved for the given inputs or that the provided password is incorrect. So double check whether the email or password is correct or an corresponding Embloy account truly exists."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is invalid or expired",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `user`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_RAC",
                            "description": "The type of error that occurred. Possible values are:\n\n- `ERR_RAC`: The requested resource cannot be accessed due to access restrictions. The server has understood the request but refuses to authorize it because it violates security policies. This error may occur due to one of the following reasons: A: The Embloy account has not been verified. Please verify the account to access the resource. B: The Embloy account is currently blacklisted and has been temporarily banned. Please contact the support team for further assistance."
                          },
                          "description": {
                            "type": "string",
                            "example": "Proceeding is inhibited by an access restriction",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "int64",
                      "example": "Please try again later. If this error persists, we recommend to contact our support team",
                      "description": "A message indicating that an internal server error has occurred. This specific error only occurs in case of an severe bug in the codebase."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/auth/token/access": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Claim an access token",
        "description": "This first verifies the provided refresh token and then issues an access token for the specific account associated with the refresh token. Access tokens only possess a very short time-limited validity or 20 minutes currently. Access tokens are a very important aspect of dealing with the Embloy API. Nearly every endpoint requires the provision of a valid access token. In conclusion access tokens are quite powerfull, have a short validity interval and can be claimend with a valid refresh token. Refresh tokens are less powerfull than access tokens but they possess a longer validity intervall and are mainly used for claiming access tokens.",
        "operationId": "createAccessToken",
        "parameters": [
          {
            "name": "refresh_token",
            "in": "header",
            "description": "A valid refresh token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOjksImV4cCI6MTY4MDM3MDg0NywianRpIjoiNTBkNzUyYTMxM2Y0ZDBiMTg3M2FhYmUwYmI2ZjNiMTUiLCJpYXQiOjE2ODAzNTY0NDcsImlzcyI6Imh1bW1lbEotU0ZDOCJ9.cenvg8tiy-in6xA1_IUXh0Q4XeIa540kfmZ6LenRM6g"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "format": "int64",
                      "example": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOjksImV4cCI6MTY4MDM1NzkxNCwidHlwIjoidmVyaWZpZWQiLCJpc3MiOiJodW1tZWxKLVNGQzgifQ.yTPkxb7tTq-qB0g9aXmznPktS1Zsa9VmVLByW3eDkCs"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `token`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_BLANK",
                            "description": "The type of error that occurred. Possible values are:\n- `ERR_BLANK`: When a required attribute is blank. All required parameters are denoted above. If all required attributes were indeed given but this error gets raised it could be that the attributs are provided falsely (e.g. via header or via path instead of body ...)"
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute can't be blank",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `refresh_token`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n- `ERR_INVALID`: If an attribute is invalid, it may be due to an expired validity or other factors. This could be caused by internal system errors or external manipulation. To resolve the issue, request a fresh refresh token and try again. Contact our support team if the problem persists."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is invalid or expired",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `user`\n- `token`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_RAC",
                            "description": "The type of error that occurred. Possible values are:\n- `ERR_RAC`: The requested resource cannot be accessed due to access restrictions. The server has understood the request but refuses to authorize it because it violates security policies. This error may occur due to one of the following reasons: A: The Embloy account has not been verified. Please verify the account to access the resource. B: The Embloy account is currently blacklisted and has been temporarily banned. Please contact the support team for further assistance. C: The refresh token is currently blacklisted and has been temporarily banned."
                          },
                          "description": {
                            "type": "string",
                            "example": "Proceeding is inhibited by an access restriction",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/jobs": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List own job postings",
        "description": "The provided access token is first verified, and then a list of all the jobs associated with its owner is generated.",
        "operationId": "listOwnJobs",
        "parameters": [
          {
            "name": "access_token",
            "in": "header",
            "description": "A valid access token",
            "required": true,
            "schema": {
              "type": "string",
              "example": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOjksImV4cCI6MTY4MDk3MzE1MSwidHlwIjoidmVyaWZpZWQiLCJpc3MiOiJodW1tZWxKLVNGQzgifQ.93iFsNUwhoQewsiGsc7fBiW8U6BjyoSmr16n-jBvN9I"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobs": {
                      "type": "array",
                      "description": "This is a list of currently active and visible job postings for the specified account.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "job_id": {
                            "type": "integer",
                            "example": 1984,
                            "description": "The specific job_id is a unique identifier for a specific job that is permanently assigned to that job and does not correspond to any other job in the system."
                          },
                          "job_type": {
                            "type": "string",
                            "example": "Marketing",
                            "description": "The job's displayed category is determined by the branch it belongs to within the system."
                          },
                          "job_type_value": {
                            "type": "integer",
                            "example": 11,
                            "description": "The job_type_value is an integer representation used to allocate similar job_types together based on a hierarchy, where many job_types can be summarized under the same value."
                          },
                          "job_status": {
                            "type": "integer",
                            "example": 1,
                            "description": "A job with a job_status of 0 will be excluded from Embloy's Job Ranking Engine and will not be visible to other users, while a job with a job_status of 1 will be considered by the engine and made visible to other users."
                          },
                          "status": {
                            "type": "string",
                            "example": "public",
                            "description": "String representation of job_status. 0 => private, 1 => public."
                          },
                          "user_id": {
                            "type": "integer",
                            "example": 9,
                            "description": "The specific user_id is a unique identifier for a specific user account that is permanently assigned to that user account and does not correspond to any other user account in the system."
                          },
                          "duration": {
                            "type": "integer",
                            "example": 120,
                            "description": "The duration of the job in minutes."
                          },
                          "code_lang": {
                            "type": "string",
                            "example": "EN",
                            "description": "The required language at the workplace as a two character code."
                          },
                          "title": {
                            "type": "string",
                            "example": "Communications talent wanted",
                            "description": "The title for the job post."
                          },
                          "position": {
                            "type": "string",
                            "example": "Brand Ambassador",
                            "description": "The specific job role."
                          },
                          "description": {
                            "type": "string",
                            "example": "We are seeking an individual with strong rhetorical skills to promote our brand to people passing by. [...]",
                            "description": "A detailed description of the job."
                          },
                          "key_skills": {
                            "type": "string",
                            "example": "open mindedness, eloquence, and always a smile on the face",
                            "description": "A brief outline of the required skills for the job."
                          },
                          "salary": {
                            "type": "integer",
                            "example": 100,
                            "description": "The total amount of compensation for the entire period of the job, in the currency specified."
                          },
                          "currency": {
                            "type": "string",
                            "example": "euro",
                            "description": "The currency of the salary denoted above."
                          },
                          "image_url": {
                            "type": "string",
                            "example": "https://embloy.com/drive/v0/img/jobs/1984",
                            "description": "The URL where the image(s) for this particular job post can be found."
                          },
                          "start_slot": {
                            "type": "string",
                            "example": "2023-04-08T14:00:00.000Z",
                            "description": "The specific start date and time for this job."
                          },
                          "latitude": {
                            "type": "integer",
                            "example": 51.5207794,
                            "description": "The latitude coordinates for the job location."
                          },
                          "longitude": {
                            "type": "integer",
                            "example": -0.1293754,
                            "description": "The longitude coordinates for the job location."
                          },
                          "country_code": {
                            "type": "string",
                            "example": "GB",
                            "description": "The two character country code for the job location."
                          },
                          "postal_code": {
                            "type": "string",
                            "example": "WC1E 7HU",
                            "description": "The postal code for the job location."
                          },
                          "city": {
                            "type": "string",
                            "example": "London",
                            "description": "The locacity for the job location."
                          },
                          "address": {
                            "type": "string",
                            "example": "251 Malet Street",
                            "description": "The address for the job location."
                          },
                          "view_count": {
                            "type": "integer",
                            "example": 2100,
                            "description": "The total number of views for this specific job post."
                          },
                          "created_at": {
                            "type": "string",
                            "example": "2023-03-23T12:21:42.623Z",
                            "description": "The specific date and time when this job post was created."
                          },
                          "updated_at": {
                            "type": "string",
                            "example": "2023-04-01T10:31:01.623Z",
                            "description": "The specific date and time when this job post was updated the last time."
                          },
                          "applications_count": {
                            "type": "integer",
                            "example": 101,
                            "description": "The total number of applications for this specific job post."
                          },
                          "employer_rating": {
                            "type": "integer",
                            "example": 4.4,
                            "description": "The average rating for the user account specified by user_id."
                          },
                          "job_notifications": {
                            "type": "string",
                            "example": 1,
                            "description": "If the job_notifications value for a job is 0, it will not be included in Embloy's notification service, and the above specified user account will not receive any push notifications for it. However, if the job_notifications value is set to 1, the job will be considered for Embloy's notification service, and the above specified user account will receive push notifications for it."
                          },
                          "boost": {
                            "type": "integer",
                            "example": 84,
                            "description": "This relates to Embloy's Job Ranking Engine and has NO RELEVANCE FOR THE USER. THIS CLAIM WILL NOT BE INCLUDED IN API V1.x"
                          },
                          "job_value": {
                            "type": "string",
                            "example": "01010000A0E6100000000000000000264000000000000048400000000000003940",
                            "description": "This relates to Embloy's Job Ranking Engine and has NO RELEVANCE FOR THE USER. THIS CLAIM WILL NOT BE INCLUDED IN API V1.x"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `token`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_BLANK",
                            "description": "The type of error that occurred. Possible values are:\n- `ERR_BLANK`: When a required attribute is blank. All required parameters are denoted above. If all required attributes were indeed given but this error gets raised it could be that the attributs are provided falsely (e.g. via header or via path instead of body ...)"
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute can't be blank",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `refresh_token`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_INVALID",
                            "description": "The type of error that occurred. Possible values are:\n- `ERR_INVALID`: If an attribute is invalid, it may be due to an expired validity or other factors. This could be caused by internal system errors or external manipulation. To resolve the issue, request a fresh refresh token and try again. Contact our support team if the problem persists."
                          },
                          "description": {
                            "type": "string",
                            "example": "Attribute is invalid or expired",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "array",
                      "description": "The attribute that caused the error. Possible values are:\n- `user`\n- `token`",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error": {
                            "type": "string",
                            "example": "ERR_RAC",
                            "description": "The type of error that occurred. Possible values are:\n- `ERR_RAC`: The requested resource cannot be accessed due to access restrictions. The server has understood the request but refuses to authorize it because it violates security policies. This error may occur due to one of the following reasons: A: The Embloy account has not been verified. Please verify the account to access the resource. B: The Embloy account is currently blacklisted and has been temporarily banned. Please contact the support team for further assistance. C: The refresh token is currently blacklisted and has been temporarily banned."
                          },
                          "description": {
                            "type": "string",
                            "example": "Proceeding is inhibited by an access restriction",
                            "description": "A brief context specific classification of the error that occured"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "order"
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 100000
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          },
          "address": {
            "type": "array",
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "xml": {
          "name": "customer"
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "state": {
            "type": "string",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "example": "94301"
          }
        },
        "xml": {
          "name": "address"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "xml": {
          "name": "category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "int64",
                "example": "winston.smith@embloy.com"
              },
              "first_name": {
                "type": "string",
                "example": "Winston"
              },
              "last_name": {
                "type": "string",
                "example": "Smith"
              },
              "password": {
                "type": "string",
                "example": "doublethink"
              },
              "password_confirmation": {
                "type": "string",
                "example": "doublethink"
              }
            }
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "int64",
                "example": "winston.smith@embloy.com"
              },
              "password": {
                "type": "string",
                "example": "doublethink"
              }
            }
          }
        }
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "int64",
                "example": "winston.smith@embloy.com"
              },
              "password": {
                "type": "string",
                "example": "doublethink"
              }
            }
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "tag"
        }
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "type": "string",
              "xml": {
                "name": "photoUrl"
              }
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}